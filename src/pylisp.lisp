(define None py:None)
(define True py:True)
(define False py:False)
(defun funcall (f *args) (python "@=_ = _Lf[0](*_Largs[0])"))
(defun apply (f args) (python "@=_ = _Lf[0](*_Largs[0])"))
(defmacro function (x) (python "@=_ = [_python, '@'+'=_ = f'+_Lx[0].name]"))
(defun map (f L) (python "@=_ = map(_Lf[0], _LL[0])"))
(defun list? (x) (python "@=_ = isinstance(_Lx[0], list)"))
(defun list (*x) (python "@=_ = list(_Lx[0])"))
(defun symbol? (x) (python "@=_ = isinstance(_Lx[0], Symbol)"))
(defun number? (x) (python "@=_ = isinstance(_Lx[0], (int, float, long))"))
(defun string? (x) (python "@=_ = isinstance(_Lx[0], (str, unicode))"))
(defun bool? (x) (python "@=_ = isinstance(_Lx[0], bool)"))
(defun none? (x) (python "@=_ = (_Lx[0] is None)"))
(defun dict? (x) (python "@=_ = isinstance(_Lx[0], dict)"))
(python "@=f_Ldict = dict")
(defun keys (x) (python "@=_ = _Lx[0].keys()"))
(defun items (x) (python "@=_ = _Lx[0].items()"))
(python "@=f_Lglobals = globals")
(defun aref (x i) (python "@=_ = _Lx[0][_Li[0]]"))
(defun set-aref (x i v) (python "@=_ = _Lv[0]@=_Lx[0][_Li[0]] = _"))
(defun slice (x start *end) (python "@=_ = _Lx[0][_Lstart[0]:_Lend[0][0]] if _Lend[0] else _Lx[0][_Lstart[0]:]"))
(defun first (x) (python "@=_ = _Lx[0][0]"))
(defun second (x) (python "@=_ = _Lx[0][1]"))
(defun third (x) (python "@=_ = _Lx[0][2]"))
(defun fourth (x) (python "@=_ = _Lx[0][3]"))
(defun fifth (x) (python "@=_ = _Lx[0][4]"))
(defun sixth (x) (python "@=_ = _Lx[0][5]"))
(defun seventh (x) (python "@=_ = _Lx[0][6]"))
(defun eigth (x) (python "@=_ = _Lx[0][7]"))
(defun ninth (x) (python "@=_ = _Lx[0][8]"))
(defun tenth (x) (python "@=_ = _Lx[0][9]"))
(defun set-first (x y) (python "@=_ = _Ly[0]@=_Lx[0][0] = _"))
(defun set-second (x y) (python "@=_ = _Ly[0]@=_Lx[0][1] = _"))
(defun set-third (x y) (python "@=_ = _Ly[0]@=_Lx[0][2] = _"))
(defun set-fourth (x y) (python "@=_ = _Ly[0]@=_Lx[0][3] = _"))
(defun set-fifth (x y) (python "@=_ = _Ly[0]@=_Lx[0][4] = _"))
(defun set-sixth (x y) (python "@=_ = _Ly[0]@=_Lx[0][5] = _"))
(defun set-seventh (x y) (python "@=_ = _Ly[0]@=_Lx[0][6] = _"))
(defun set-eigth (x y) (python "@=_ = _Ly[0]@=_Lx[0][7] = _"))
(defun set-ninth (x y) (python "@=_ = _Ly[0]@=_Lx[0][8] = _"))
(defun set-tenth (x y) (python "@=_ = _Ly[0]@=_Lx[0][9] = _"))
(defun rest (x) (python "@=_ = _Lx[0][1:]"))
(python "@=f_Lrange = range")
(defun + (*x) (python "@=_ = _Lx[0][0]@=for y in _Lx[0][1:]: _ += y"))
(defun * (*x) (python "@=_ = _Lx[0][0]@=for y in _Lx[0][1:]: _ *= y"))
(defun - (x *rest) (python "@=_ = _Lx[0]-sum(_Lrest[0]) if _Lrest[0] else -_Lx[0]"))
(defun / (x *rest) (python "@=if _Lrest[0]:@+_ = _Lx[0]@=for y in _Lrest[0]: _/=y@-else:@+_ = 1.0/_Lx[0]@-"))
(defun ash (a b) (python "@=_ = _La[0] << _Lb[0] if _Lb[0] >= 0 else _La[0] >> -_Lb[0]"))
(defun < (*x) (python "@=_ = all(_Lx[0][i] < _Lx[0][i+1] for i in range(len(_Lx[0])-1))"))
(defun <= (*x) (python "@=_ = all(_Lx[0][i] <= _Lx[0][i+1] for i in range(len(_Lx[0])-1))"))
(defun > (*x) (python "@=_ = all(_Lx[0][i] > _Lx[0][i+1] for i in range(len(_Lx[0])-1))"))
(defun >= (*x) (python "@=_ = all(_Lx[0][i] >= _Lx[0][i+1] for i in range(len(_Lx[0])-1))"))
(defun = (*x) (python "@=_ = all(_Lx[0][i] == _Lx[0][i+1] for i in range(len(_Lx[0])-1))"))
(defun /= (a b) (python "@=_ = (_Lx[0] != _Ly[0])"))
(defun logand (x *rest) (python "@=_ = _Lx[0]@=for y in _Lrest[0]: _ &= y"))
(defun logior (x *rest) (python "@=_ = _Lx[0]@=for y in _Lrest[0]: _ |= y"))
(defun logxor (x *rest) (python "@=_ = _Lx[0]@=for y in _Lrest[0]: _ ^= y"))
(defmacro let (bindings *body)
  (+ (list 'funcall (+ (list 'lambda (map #'first bindings))
                       body))
     (map #'second bindings)))
(defmacro dolist (var+L *body)
  (list 'progn
        (list 'map (+ (list 'lambda (list (first var+L)))
                      body)
              (second var+L))
        None))
(defmacro dotimes (var+count *body)
  (+ (list 'dolist (list (first var+count) (list 'range (second var+count))))
     body))

(defun print (x) (python "@=_ = f_Lout(f_Lstr(_Lx[0]) + '\\n')"))

(defun load (x) (python "@=with open(_Lx[0]) as f:@+parse(f.read(), f_Leval)@-"))

(defmacro when (test *body)
  (list 'if test (+ (list 'progn) body) 'None))

(defmacro unless (test *body)
  (list 'if test 'None (+ (list 'progn) body)))

(python "@=f_Llength = len")

(defun gensym ()
  (intern (+ "#:" (str (python "@=_un[0] += 1@=_ = _un[0]")))))

(defun macroexpand-1 (x)
  (python "@=_ = globals()['m'+_Lx[0][0].name](*_Lx[0][1:])"))

(defmacro and (*xs)
  (if (= (length xs) 0)
      'True
      (if (= (length xs) 1)
          (first xs)
          (let ((r (gensym)))
            (list 'let (list (list r (first xs)))
                  (list 'if r
                        (+ (list 'and)
                           (rest xs))
                        r))))))

(defun zerop (x)
  (= x 0))

(defun error (x)
  (python "@=raise RuntimeError(_Lx[0])"))

(defun symbol-name (x)
  (demangle (python "@=_ = _Lx[0].name")))

(defmacro setf (place value)
  (if (symbol? place)
      (list 'setq place value)
      (if (and (list? place)
               (symbol? (first place)))
          (+ (list (intern (+ "set-" (symbol-name (first place)))))
             (rest place)
             (list value))
          (error "Unsupported setf place"))))

(out "PyLisp 0.001\n")
